{"version":3,"sources":["flexbox.scss","main.scss"],"names":[],"mappings":";AAsEU,AAAU,AAAW,AAAa,AAAW,AAAY,AAAS,AAAM,AAAO,AAAW,AAAY,AAAS;EARrH,AAAS;EACT,AAAS;EACT,AAAS;EACT,AAAS;EACT,AAAS;;;AAkBC;EAPV,AAAS;EACT,AAAS;EACT,AAAS;EACT,AAAS;EACT,AAAS;;;AAXH,AAAU,AAAW,AAAa,AAAW,AAAY,AAAS,AAAM,AAAO,AAAW,AAAY,AAAS;EARrH,AAAS;EACT,AAAS;EACT,AAAS;EACT,AAAS;EACT,AAAS;;;AAkBC;EAPV,AAAS;EACT,AAAS;EACT,AAAS;EACT,AAAS;EACT,AAAS;;;;;ACpEb;EACI,AAAQ;EACR,AAAO;;EAEX,AAAW;ID+FH,AAAuB;IACvB,AAAoB;IAExB,AChG4B;IDiG5B,ACjG4B;IDkG5B,AClG4B;IDmG5B,ACnG4B;IACxB,AAAO;;IACf,AAAW,AAAY;MACX,AAAkB;MAClB,AAAO;;IAEnB,AAAW,AAAY;MDkLnB,ACjL2B;MDkL3B,AClL2B;MDmL3B,ACnL2B;MDoL3B,ACpL2B;MDqL3B,ACrL2B;MACnB,AAAY;MACZ,AAAQ;MACR,AAAQ;MACR,AAAS;;MACrB,AAAW,AAAY,AAAiB;QACxB,AAAQ;;IAGxB,AAAW,AAAY;MAnBN,AAoBT;;MACR,AAAW,AAAY,AAAS;QDsK5B,ACrK2B;QDsK3B,ACtK2B;QDuK3B,ACvK2B;QDwK3B,ACxK2B;QDyK3B,ACzK2B;QACnB,AAAgB;;QAC5B,AAAW,AAAY,AAAS,AAAM;UAEtB,AAAO;UACP,AAAa;;MAG7B,AAAW,AAAY,AAAS;QACpB,AAAO;QAEP,AAAoB;QACpB,AAAuB;QACvB,AAAe;QACf,AAAW","file":"style.css","sourcesContent":["\n// Flexbox Mixins\n// http://philipwalton.github.io/solved-by-flexbox/\n// https://github.com/philipwalton/solved-by-flexbox\n//\n// Copyright (c) 2013 Brian Franco\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// This is a set of mixins for those who want to mess around with flexbox\n// using the native support of current browsers. For full support table\n// check: http://caniuse.com/flexbox\n//\n// Basically this will use:\n//\n// * Fallback, old syntax (IE10, mobile webkit browsers - no wrapping)\n// * Final standards syntax (FF, Safari, Chrome, IE11, Opera)\n//\n// This was inspired by:\n//\n// * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/\n//\n// With help from:\n//\n// * http://w3.org/tr/css3-flexbox/\n// * http://the-echoplex.net/flexyboxes/\n// * http://msdn.microsoft.com/en-us/library/ie/hh772069(v=vs.85).aspx\n// * http://css-tricks.com/using-flexbox/\n// * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/\n// * https://developer.mozilla.org/en-us/docs/web/guide/css/flexible_boxes\n//----------------------------------------------------------------------\n\n// Flexbox Containers\n//\n// The 'flex' value causes an element to generate a block-level flex\n// container box.\n//\n// The 'inline-flex' value causes an element to generate a inline-level\n// flex container box.\n//\n// display: flex | inline-flex\n//\n// http://w3.org/tr/css3-flexbox/#flex-containers\n//\n// (Placeholder selectors for each type, for those who rather @extend)\n\n@mixin flexbox {\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: -moz-flex;\n    display: -ms-flexbox;\n    display: flex;\n}\n\n\n%flexbox {\n    @include flexbox;\n}\n\n//----------------------------------\n\n@mixin inline-flex {\n    display: -webkit-inline-box;\n    display: -webkit-inline-flex;\n    display: -moz-inline-flex;\n    display: -ms-inline-flexbox;\n    display: inline-flex;\n}\n\n%inline-flex {\n    @include inline-flex;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Direction\n//\n// The 'flex-direction' property specifies how flex items are placed in\n// the flex container, by setting the direction of the flex container's\n// main axis. This determines the direction that flex items are laid out in.\n//\n// Values: row | row-reverse | column | column-reverse\n// Default: row\n//\n// http://w3.org/tr/css3-flexbox/#flex-direction-property\n\n@mixin flex-direction($value: row) {\n    @if $value == row-reverse {\n        -webkit-box-direction: reverse;\n        -webkit-box-orient: horizontal;\n    } @else if $value == column {\n        -webkit-box-direction: normal;\n        -webkit-box-orient: vertical;\n    } @else if $value == column-reverse {\n        -webkit-box-direction: reverse;\n        -webkit-box-orient: vertical;\n    } @else {\n        -webkit-box-direction: normal;\n        -webkit-box-orient: horizontal;\n    }\n    -webkit-flex-direction: $value;\n    -moz-flex-direction: $value;\n    -ms-flex-direction: $value;\n    flex-direction: $value;\n}\n\n// Shorter version:\n@mixin flex-dir($args...) {\n    @include flex-direction($args...);\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Wrap\n//\n// The 'flex-wrap' property controls whether the flex container is single-line\n// or multi-line, and the direction of the cross-axis, which determines\n// the direction new lines are stacked in.\n//\n// Values: nowrap | wrap | wrap-reverse\n// Default: nowrap\n//\n// http://w3.org/tr/css3-flexbox/#flex-wrap-property\n\n@mixin flex-wrap($value: nowrap) {\n    // No Webkit Box fallback.\n    -webkit-flex-wrap: $value;\n    -moz-flex-wrap: $value;\n    @if $value == nowrap {\n        -ms-flex-wrap: none;\n    } @else {\n        -ms-flex-wrap: $value;\n    }\n    flex-wrap: $value;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Flow (shorthand)\n//\n// The 'flex-flow' property is a shorthand for setting the 'flex-direction'\n// and 'flex-wrap' properties, which together define the flex container's\n// main and cross axes.\n//\n// Values: <flex-direction> | <flex-wrap>\n// Default: row nowrap\n//\n// http://w3.org/tr/css3-flexbox/#flex-flow-property\n\n@mixin flex-flow($values: (row nowrap)) {\n    // No Webkit Box fallback.\n    -webkit-flex-flow: $values;\n    -moz-flex-flow: $values;\n    -ms-flex-flow: $values;\n    flex-flow: $values;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Order\n//\n// The 'order' property controls the order in which flex items appear within\n// their flex container, by assigning them to ordinal groups.\n//\n// Default: 0\n//\n// http://w3.org/tr/css3-flexbox/#order-property\n\n@mixin order($int: 0) {\n    -webkit-box-ordinal-group: $int + 1;\n    -webkit-order: $int;\n    -moz-order: $int;\n    -ms-flex-order: $int;\n    order: $int;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Grow\n//\n// The 'flex-grow' property sets the flex grow factor. Negative numbers\n// are invalid.\n//\n// Default: 0\n//\n// http://w3.org/tr/css3-flexbox/#flex-grow-property\n\n@mixin flex-grow($int: 0) {\n    -webkit-box-flex: $int;\n    -webkit-flex-grow: $int;\n    -moz-flex-grow: $int;\n    -ms-flex-positive: $int;\n    flex-grow: $int;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Shrink\n//\n// The 'flex-shrink' property sets the flex shrink factor. Negative numbers\n// are invalid.\n//\n// Default: 1\n//\n// http://w3.org/tr/css3-flexbox/#flex-shrink-property\n\n@mixin flex-shrink($int: 1) {\n    -webkit-flex-shrink: $int;\n    -moz-flex-shrink: $int;\n    -ms-flex-negative: $int;\n    flex-shrink: $int;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Basis\n//\n// The 'flex-basis' property sets the flex basis. Negative lengths are invalid.\n//\n// Values: Like \"width\"\n// Default: auto\n//\n// http://www.w3.org/TR/css3-flexbox/#flex-basis-property\n\n@mixin flex-basis($value: auto) {\n    -webkit-flex-basis: $value;\n    -moz-flex-basis: $value;\n    -ms-flex-preferred-size: $value;\n    flex-basis: $value;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox \"Flex\" (shorthand)\n//\n// The 'flex' property specifies the components of a flexible length: the\n// flex grow factor and flex shrink factor, and the flex basis. When an\n// element is a flex item, 'flex' is consulted instead of the main size\n// property to determine the main size of the element. If an element is\n// not a flex item, 'flex' has no effect.\n//\n// Values: none | <flex-grow> <flex-shrink> || <flex-basis>\n// Default: See individual properties (1 1 0).\n//\n// http://w3.org/tr/css3-flexbox/#flex-property\n\n@mixin flex($fg: 1, $fs: null, $fb: null) {\n\n    // Set a variable to be used by box-flex properties\n    $fg-boxflex: $fg;\n\n    // Box-Flex only supports a flex-grow value so let's grab the\n    // first item in the list and just return that.\n    @if type-of($fg) == 'list' {\n        $fg-boxflex: nth($fg, 1);\n    }\n\n    -webkit-box-flex: $fg-boxflex;\n    -webkit-flex: $fg $fs $fb;\n    -moz-box-flex: $fg-boxflex;\n    -moz-flex: $fg $fs $fb;\n    -ms-flex: $fg $fs $fb;\n    flex: $fg $fs $fb;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Justify Content\n//\n// The 'justify-content' property aligns flex items along the main axis\n// of the current line of the flex container. This is done after any flexible\n// lengths and any auto margins have been resolved. Typically it helps distribute\n// extra free space leftover when either all the flex items on a line are\n// inflexible, or are flexible but have reached their maximum size. It also\n// exerts some control over the alignment of items when they overflow the line.\n//\n// Note: 'space-*' values not supported in older syntaxes.\n//\n// Values: flex-start | flex-end | center | space-between | space-around\n// Default: flex-start\n//\n// http://w3.org/tr/css3-flexbox/#justify-content-property\n\n@mixin justify-content($value: flex-start) {\n    @if $value == flex-start {\n        -webkit-box-pack: start;\n        -ms-flex-pack: start;\n    } @else if $value == flex-end {\n        -webkit-box-pack: end;\n        -ms-flex-pack: end;\n    } @else if $value == space-between {\n        -webkit-box-pack: justify;\n        -ms-flex-pack: justify;\n    } @else if $value == space-around {\n        -ms-flex-pack: distribute;\n    } @else {\n        -webkit-box-pack: $value;\n        -ms-flex-pack: $value;\n    }\n    -webkit-justify-content: $value;\n    -moz-justify-content: $value;\n    justify-content: $value;\n}\n\n// Shorter version:\n@mixin flex-just($args...) {\n    @include justify-content($args...);\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Align Items\n//\n// Flex items can be aligned in the cross axis of the current line of the\n// flex container, similar to 'justify-content' but in the perpendicular\n// direction. 'align-items' sets the default alignment for all of the flex\n// container's items, including anonymous flex items. 'align-self' allows\n// this default alignment to be overridden for individual flex items. (For\n// anonymous flex items, 'align-self' always matches the value of 'align-items'\n// on their associated flex container.)\n//\n// Values: flex-start | flex-end | center | baseline | stretch\n// Default: stretch\n//\n// http://w3.org/tr/css3-flexbox/#align-items-property\n\n@mixin align-items($value: stretch) {\n    @if $value == flex-start {\n        -webkit-box-align: start;\n        -ms-flex-align: start;\n    } @else if $value == flex-end {\n        -webkit-box-align: end;\n        -ms-flex-align: end;\n    } @else {\n        -webkit-box-align: $value;\n        -ms-flex-align: $value;\n    }\n    -webkit-align-items: $value;\n    -moz-align-items: $value;\n    align-items: $value;\n}\n\n//----------------------------------\n\n// Flexbox Align Self\n//\n// Values: auto | flex-start | flex-end | center | baseline | stretch\n// Default: auto\n\n@mixin align-self($value: auto) {\n    // No Webkit Box Fallback.\n    -webkit-align-self: $value;\n    -moz-align-self: $value;\n    @if $value == flex-start {\n        -ms-flex-item-align: start;\n    } @else if $value == flex-end {\n        -ms-flex-item-align: end;\n    } @else {\n        -ms-flex-item-align: $value;\n    }\n    align-self: $value;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Align Content\n//\n// The 'align-content' property aligns a flex container's lines within the\n// flex container when there is extra space in the cross-axis, similar to\n// how 'justify-content' aligns individual items within the main-axis. Note,\n// this property has no effect when the flexbox has only a single line.\n//\n// Values: flex-start | flex-end | center | space-between | space-around | stretch\n// Default: stretch\n//\n// http://w3.org/tr/css3-flexbox/#align-content-property\n\n@mixin align-content($value: stretch) {\n    // No Webkit Box Fallback.\n    -webkit-align-content: $value;\n    -moz-align-content: $value;\n    @if $value == flex-start {\n        -ms-flex-line-pack: start;\n    } @else if $value == flex-end {\n        -ms-flex-line-pack: end;\n    } @else {\n        -ms-flex-line-pack: $value;\n    }\n    align-content: $value;\n}\n","@import \"flexbox\";\n\n/*--------------------------------------------------------------------*/\n\n.flexbox { @extend %flexbox; }\n.flexbox-inline { @extend %inline-flex; }\n\n/*--------------------------------------------------------------------*/\n\n//------------------------------------------------------------\n\n\n\n.mg_widget {\n    height: 400px;\n    width: 400px;\n    $color_main: #103754;\n    .table-view {\n        @extend %flexbox;\n        @include flex-direction(row);\n        width: 100%;\n        .selected{\n            background-color: #001364;\n            color: #f5f5f5;\n        }\n        .table-view-cell {\n            @include flex-grow(1);\n            text-align: center;\n            height: 25px;\n            margin: 0;\n            padding: 0;\n            a {\n                margin: 0;\n            }\n        }\n    .content {\n        background-color: $color_main;\n        .card{\n            @include flex-grow(1);\n            padding-bottom: 1.8em;\n            label{\n                @extend %flexbox;\n                width: 100%;\n                padding-top: 1.8em;\n            }\n        }\n        .textfields{\n            width: 100%;\n            @extend %flexbox;\n            -moz-border-radius: 5px;\n            -webkit-border-radius: 5px;\n            border-radius: 5px;\n            font-size: 1.5em;\n        }\n        }\n    }\n\n}\n\n"],"sourceRoot":"/source/"}